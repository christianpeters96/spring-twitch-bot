/*
 * This file is generated by jOOQ.
 */
package de.sharpadogge.twitchbot.jooq.tables.records;


import de.sharpadogge.twitchbot.jooq.tables.UserSpamFilters;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSpamFiltersRecord extends UpdatableRecordImpl<UserSpamFiltersRecord> implements Record7<Long, String, Byte, Byte, Integer, Integer, String> {

    private static final long serialVersionUID = 121393957;

    /**
     * Setter for <code>twitchbot.user_spam_filters.user_id</code>.
     */
    public void setUserId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_filters.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>twitchbot.user_spam_filters.filter</code>.
     */
    public void setFilter(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_filters.filter</code>.
     */
    public String getFilter() {
        return (String) get(1);
    }

    /**
     * Setter for <code>twitchbot.user_spam_filters.active</code>.
     */
    public void setActive(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_filters.active</code>.
     */
    public Byte getActive() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>twitchbot.user_spam_filters.silent</code>.
     */
    public void setSilent(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_filters.silent</code>.
     */
    public Byte getSilent() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>twitchbot.user_spam_filters.timeout_duration</code>.
     */
    public void setTimeoutDuration(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_filters.timeout_duration</code>.
     */
    public Integer getTimeoutDuration() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>twitchbot.user_spam_filters.allowed_limit</code>.
     */
    public void setAllowedLimit(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_filters.allowed_limit</code>.
     */
    public Integer getAllowedLimit() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>twitchbot.user_spam_filters.message</code>.
     */
    public void setMessage(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_filters.message</code>.
     */
    public String getMessage() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Byte, Byte, Integer, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, Byte, Byte, Integer, Integer, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UserSpamFilters.USER_SPAM_FILTERS.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return UserSpamFilters.USER_SPAM_FILTERS.FILTER;
    }

    @Override
    public Field<Byte> field3() {
        return UserSpamFilters.USER_SPAM_FILTERS.ACTIVE;
    }

    @Override
    public Field<Byte> field4() {
        return UserSpamFilters.USER_SPAM_FILTERS.SILENT;
    }

    @Override
    public Field<Integer> field5() {
        return UserSpamFilters.USER_SPAM_FILTERS.TIMEOUT_DURATION;
    }

    @Override
    public Field<Integer> field6() {
        return UserSpamFilters.USER_SPAM_FILTERS.ALLOWED_LIMIT;
    }

    @Override
    public Field<String> field7() {
        return UserSpamFilters.USER_SPAM_FILTERS.MESSAGE;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getFilter();
    }

    @Override
    public Byte component3() {
        return getActive();
    }

    @Override
    public Byte component4() {
        return getSilent();
    }

    @Override
    public Integer component5() {
        return getTimeoutDuration();
    }

    @Override
    public Integer component6() {
        return getAllowedLimit();
    }

    @Override
    public String component7() {
        return getMessage();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getFilter();
    }

    @Override
    public Byte value3() {
        return getActive();
    }

    @Override
    public Byte value4() {
        return getSilent();
    }

    @Override
    public Integer value5() {
        return getTimeoutDuration();
    }

    @Override
    public Integer value6() {
        return getAllowedLimit();
    }

    @Override
    public String value7() {
        return getMessage();
    }

    @Override
    public UserSpamFiltersRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserSpamFiltersRecord value2(String value) {
        setFilter(value);
        return this;
    }

    @Override
    public UserSpamFiltersRecord value3(Byte value) {
        setActive(value);
        return this;
    }

    @Override
    public UserSpamFiltersRecord value4(Byte value) {
        setSilent(value);
        return this;
    }

    @Override
    public UserSpamFiltersRecord value5(Integer value) {
        setTimeoutDuration(value);
        return this;
    }

    @Override
    public UserSpamFiltersRecord value6(Integer value) {
        setAllowedLimit(value);
        return this;
    }

    @Override
    public UserSpamFiltersRecord value7(String value) {
        setMessage(value);
        return this;
    }

    @Override
    public UserSpamFiltersRecord values(Long value1, String value2, Byte value3, Byte value4, Integer value5, Integer value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserSpamFiltersRecord
     */
    public UserSpamFiltersRecord() {
        super(UserSpamFilters.USER_SPAM_FILTERS);
    }

    /**
     * Create a detached, initialised UserSpamFiltersRecord
     */
    public UserSpamFiltersRecord(Long userId, String filter, Byte active, Byte silent, Integer timeoutDuration, Integer allowedLimit, String message) {
        super(UserSpamFilters.USER_SPAM_FILTERS);

        set(0, userId);
        set(1, filter);
        set(2, active);
        set(3, silent);
        set(4, timeoutDuration);
        set(5, allowedLimit);
        set(6, message);
    }
}
