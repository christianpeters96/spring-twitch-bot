/*
 * This file is generated by jOOQ.
 */
package de.sharpadogge.twitchbot.jooq.tables;


import de.sharpadogge.twitchbot.jooq.Keys;
import de.sharpadogge.twitchbot.jooq.Twitchbot;
import de.sharpadogge.twitchbot.jooq.tables.records.UserSpamFiltersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSpamFilters extends TableImpl<UserSpamFiltersRecord> {

    private static final long serialVersionUID = 1244037503;

    /**
     * The reference instance of <code>twitchbot.user_spam_filters</code>
     */
    public static final UserSpamFilters USER_SPAM_FILTERS = new UserSpamFilters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSpamFiltersRecord> getRecordType() {
        return UserSpamFiltersRecord.class;
    }

    /**
     * The column <code>twitchbot.user_spam_filters.user_id</code>.
     */
    public final TableField<UserSpamFiltersRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>twitchbot.user_spam_filters.filter</code>.
     */
    public final TableField<UserSpamFiltersRecord, String> FILTER = createField(DSL.name("filter"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>twitchbot.user_spam_filters.active</code>.
     */
    public final TableField<UserSpamFiltersRecord, Byte> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>twitchbot.user_spam_filters.silent</code>.
     */
    public final TableField<UserSpamFiltersRecord, Byte> SILENT = createField(DSL.name("silent"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>twitchbot.user_spam_filters.timeout_duration</code>.
     */
    public final TableField<UserSpamFiltersRecord, Integer> TIMEOUT_DURATION = createField(DSL.name("timeout_duration"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("600", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>twitchbot.user_spam_filters.allowed_limit</code>.
     */
    public final TableField<UserSpamFiltersRecord, Integer> ALLOWED_LIMIT = createField(DSL.name("allowed_limit"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("8", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>twitchbot.user_spam_filters.message</code>.
     */
    public final TableField<UserSpamFiltersRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>twitchbot.user_spam_filters</code> table reference
     */
    public UserSpamFilters() {
        this(DSL.name("user_spam_filters"), null);
    }

    /**
     * Create an aliased <code>twitchbot.user_spam_filters</code> table reference
     */
    public UserSpamFilters(String alias) {
        this(DSL.name(alias), USER_SPAM_FILTERS);
    }

    /**
     * Create an aliased <code>twitchbot.user_spam_filters</code> table reference
     */
    public UserSpamFilters(Name alias) {
        this(alias, USER_SPAM_FILTERS);
    }

    private UserSpamFilters(Name alias, Table<UserSpamFiltersRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSpamFilters(Name alias, Table<UserSpamFiltersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserSpamFilters(Table<O> child, ForeignKey<O, UserSpamFiltersRecord> key) {
        super(child, key, USER_SPAM_FILTERS);
    }

    @Override
    public Schema getSchema() {
        return Twitchbot.TWITCHBOT;
    }

    @Override
    public UniqueKey<UserSpamFiltersRecord> getPrimaryKey() {
        return Keys.KEY_USER_SPAM_FILTERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserSpamFiltersRecord>> getKeys() {
        return Arrays.<UniqueKey<UserSpamFiltersRecord>>asList(Keys.KEY_USER_SPAM_FILTERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserSpamFiltersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserSpamFiltersRecord, ?>>asList(Keys.FK_SPAM_FILTERS_USER_ID);
    }

    public Users users() {
        return new Users(this, Keys.FK_SPAM_FILTERS_USER_ID);
    }

    @Override
    public UserSpamFilters as(String alias) {
        return new UserSpamFilters(DSL.name(alias), this);
    }

    @Override
    public UserSpamFilters as(Name alias) {
        return new UserSpamFilters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSpamFilters rename(String name) {
        return new UserSpamFilters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSpamFilters rename(Name name) {
        return new UserSpamFilters(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Byte, Byte, Integer, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
