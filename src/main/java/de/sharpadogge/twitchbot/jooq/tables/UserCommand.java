/*
 * This file is generated by jOOQ.
 */
package de.sharpadogge.twitchbot.jooq.tables;


import de.sharpadogge.twitchbot.jooq.Keys;
import de.sharpadogge.twitchbot.jooq.Twitchbot;
import de.sharpadogge.twitchbot.jooq.tables.records.UserCommandRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCommand extends TableImpl<UserCommandRecord> {

    private static final long serialVersionUID = -1287465263;

    /**
     * The reference instance of <code>twitchbot.user_command</code>
     */
    public static final UserCommand USER_COMMAND = new UserCommand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserCommandRecord> getRecordType() {
        return UserCommandRecord.class;
    }

    /**
     * The column <code>twitchbot.user_command.id</code>.
     */
    public final TableField<UserCommandRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>twitchbot.user_command.user_id</code>.
     */
    public final TableField<UserCommandRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>twitchbot.user_command.cmd</code>.
     */
    public final TableField<UserCommandRecord, String> CMD = createField(DSL.name("cmd"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>twitchbot.user_command.argc</code>.
     */
    public final TableField<UserCommandRecord, Integer> ARGC = createField(DSL.name("argc"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>twitchbot.user_command.enabled</code>.
     */
    public final TableField<UserCommandRecord, Byte> ENABLED = createField(DSL.name("enabled"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>twitchbot.user_command.name</code>.
     */
    public final TableField<UserCommandRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("'Unnamed'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>twitchbot.user_command.description</code>.
     */
    public final TableField<UserCommandRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("'No description'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>twitchbot.user_command.global_delay</code>.
     */
    public final TableField<UserCommandRecord, Integer> GLOBAL_DELAY = createField(DSL.name("global_delay"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>twitchbot.user_command.user_delay</code>.
     */
    public final TableField<UserCommandRecord, Integer> USER_DELAY = createField(DSL.name("user_delay"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>twitchbot.user_command.cost</code>.
     */
    public final TableField<UserCommandRecord, Integer> COST = createField(DSL.name("cost"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>twitchbot.user_command</code> table reference
     */
    public UserCommand() {
        this(DSL.name("user_command"), null);
    }

    /**
     * Create an aliased <code>twitchbot.user_command</code> table reference
     */
    public UserCommand(String alias) {
        this(DSL.name(alias), USER_COMMAND);
    }

    /**
     * Create an aliased <code>twitchbot.user_command</code> table reference
     */
    public UserCommand(Name alias) {
        this(alias, USER_COMMAND);
    }

    private UserCommand(Name alias, Table<UserCommandRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserCommand(Name alias, Table<UserCommandRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserCommand(Table<O> child, ForeignKey<O, UserCommandRecord> key) {
        super(child, key, USER_COMMAND);
    }

    @Override
    public Schema getSchema() {
        return Twitchbot.TWITCHBOT;
    }

    @Override
    public Identity<UserCommandRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_COMMAND;
    }

    @Override
    public UniqueKey<UserCommandRecord> getPrimaryKey() {
        return Keys.KEY_USER_COMMAND_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserCommandRecord>> getKeys() {
        return Arrays.<UniqueKey<UserCommandRecord>>asList(Keys.KEY_USER_COMMAND_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserCommandRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserCommandRecord, ?>>asList(Keys.FK_USER_COMMAND_USER_ID);
    }

    public Users users() {
        return new Users(this, Keys.FK_USER_COMMAND_USER_ID);
    }

    @Override
    public UserCommand as(String alias) {
        return new UserCommand(DSL.name(alias), this);
    }

    @Override
    public UserCommand as(Name alias) {
        return new UserCommand(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCommand rename(String name) {
        return new UserCommand(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCommand rename(Name name) {
        return new UserCommand(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, String, Integer, Byte, String, String, Integer, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
