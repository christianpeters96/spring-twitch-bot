/*
 * This file is generated by jOOQ.
 */
package de.sharpadogge.twitchbot.jooq.tables.records;


import de.sharpadogge.twitchbot.jooq.tables.IntegrationAuth;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IntegrationAuthRecord extends UpdatableRecordImpl<IntegrationAuthRecord> implements Record7<Long, String, String, String, LocalDateTime, String, String> {

    private static final long serialVersionUID = 1874480141;

    /**
     * Setter for <code>twitchbot.integration_auth.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>twitchbot.integration_auth.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>twitchbot.integration_auth.provider</code>.
     */
    public void setProvider(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>twitchbot.integration_auth.provider</code>.
     */
    public String getProvider() {
        return (String) get(1);
    }

    /**
     * Setter for <code>twitchbot.integration_auth.access_token</code>.
     */
    public void setAccessToken(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>twitchbot.integration_auth.access_token</code>.
     */
    public String getAccessToken() {
        return (String) get(2);
    }

    /**
     * Setter for <code>twitchbot.integration_auth.refresh_token</code>.
     */
    public void setRefreshToken(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>twitchbot.integration_auth.refresh_token</code>.
     */
    public String getRefreshToken() {
        return (String) get(3);
    }

    /**
     * Setter for <code>twitchbot.integration_auth.expires_at</code>.
     */
    public void setExpiresAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>twitchbot.integration_auth.expires_at</code>.
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>twitchbot.integration_auth.scope</code>.
     */
    public void setScope(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>twitchbot.integration_auth.scope</code>.
     */
    public String getScope() {
        return (String) get(5);
    }

    /**
     * Setter for <code>twitchbot.integration_auth.token_type</code>.
     */
    public void setTokenType(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>twitchbot.integration_auth.token_type</code>.
     */
    public String getTokenType() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, LocalDateTime, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, String, String, LocalDateTime, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return IntegrationAuth.INTEGRATION_AUTH.ID;
    }

    @Override
    public Field<String> field2() {
        return IntegrationAuth.INTEGRATION_AUTH.PROVIDER;
    }

    @Override
    public Field<String> field3() {
        return IntegrationAuth.INTEGRATION_AUTH.ACCESS_TOKEN;
    }

    @Override
    public Field<String> field4() {
        return IntegrationAuth.INTEGRATION_AUTH.REFRESH_TOKEN;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return IntegrationAuth.INTEGRATION_AUTH.EXPIRES_AT;
    }

    @Override
    public Field<String> field6() {
        return IntegrationAuth.INTEGRATION_AUTH.SCOPE;
    }

    @Override
    public Field<String> field7() {
        return IntegrationAuth.INTEGRATION_AUTH.TOKEN_TYPE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getProvider();
    }

    @Override
    public String component3() {
        return getAccessToken();
    }

    @Override
    public String component4() {
        return getRefreshToken();
    }

    @Override
    public LocalDateTime component5() {
        return getExpiresAt();
    }

    @Override
    public String component6() {
        return getScope();
    }

    @Override
    public String component7() {
        return getTokenType();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getProvider();
    }

    @Override
    public String value3() {
        return getAccessToken();
    }

    @Override
    public String value4() {
        return getRefreshToken();
    }

    @Override
    public LocalDateTime value5() {
        return getExpiresAt();
    }

    @Override
    public String value6() {
        return getScope();
    }

    @Override
    public String value7() {
        return getTokenType();
    }

    @Override
    public IntegrationAuthRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public IntegrationAuthRecord value2(String value) {
        setProvider(value);
        return this;
    }

    @Override
    public IntegrationAuthRecord value3(String value) {
        setAccessToken(value);
        return this;
    }

    @Override
    public IntegrationAuthRecord value4(String value) {
        setRefreshToken(value);
        return this;
    }

    @Override
    public IntegrationAuthRecord value5(LocalDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public IntegrationAuthRecord value6(String value) {
        setScope(value);
        return this;
    }

    @Override
    public IntegrationAuthRecord value7(String value) {
        setTokenType(value);
        return this;
    }

    @Override
    public IntegrationAuthRecord values(Long value1, String value2, String value3, String value4, LocalDateTime value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IntegrationAuthRecord
     */
    public IntegrationAuthRecord() {
        super(IntegrationAuth.INTEGRATION_AUTH);
    }

    /**
     * Create a detached, initialised IntegrationAuthRecord
     */
    public IntegrationAuthRecord(Long id, String provider, String accessToken, String refreshToken, LocalDateTime expiresAt, String scope, String tokenType) {
        super(IntegrationAuth.INTEGRATION_AUTH);

        set(0, id);
        set(1, provider);
        set(2, accessToken);
        set(3, refreshToken);
        set(4, expiresAt);
        set(5, scope);
        set(6, tokenType);
    }
}
