/*
 * This file is generated by jOOQ.
 */
package de.sharpadogge.twitchbot.jooq.tables;


import de.sharpadogge.twitchbot.jooq.Keys;
import de.sharpadogge.twitchbot.jooq.Twitchbot;
import de.sharpadogge.twitchbot.jooq.tables.records.UserChannelEventsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserChannelEvents extends TableImpl<UserChannelEventsRecord> {

    private static final long serialVersionUID = 1268027771;

    /**
     * The reference instance of <code>twitchbot.user_channel_events</code>
     */
    public static final UserChannelEvents USER_CHANNEL_EVENTS = new UserChannelEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserChannelEventsRecord> getRecordType() {
        return UserChannelEventsRecord.class;
    }

    /**
     * The column <code>twitchbot.user_channel_events.id</code>.
     */
    public final TableField<UserChannelEventsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>twitchbot.user_channel_events.user_id</code>.
     */
    public final TableField<UserChannelEventsRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>twitchbot.user_channel_events.created_at</code>.
     */
    public final TableField<UserChannelEventsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>twitchbot.user_channel_events.topic</code>.
     */
    public final TableField<UserChannelEventsRecord, String> TOPIC = createField(DSL.name("topic"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>twitchbot.user_channel_events.json_message</code>.
     */
    public final TableField<UserChannelEventsRecord, String> JSON_MESSAGE = createField(DSL.name("json_message"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>twitchbot.user_channel_events</code> table reference
     */
    public UserChannelEvents() {
        this(DSL.name("user_channel_events"), null);
    }

    /**
     * Create an aliased <code>twitchbot.user_channel_events</code> table reference
     */
    public UserChannelEvents(String alias) {
        this(DSL.name(alias), USER_CHANNEL_EVENTS);
    }

    /**
     * Create an aliased <code>twitchbot.user_channel_events</code> table reference
     */
    public UserChannelEvents(Name alias) {
        this(alias, USER_CHANNEL_EVENTS);
    }

    private UserChannelEvents(Name alias, Table<UserChannelEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserChannelEvents(Name alias, Table<UserChannelEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserChannelEvents(Table<O> child, ForeignKey<O, UserChannelEventsRecord> key) {
        super(child, key, USER_CHANNEL_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return Twitchbot.TWITCHBOT;
    }

    @Override
    public Identity<UserChannelEventsRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_CHANNEL_EVENTS;
    }

    @Override
    public UniqueKey<UserChannelEventsRecord> getPrimaryKey() {
        return Keys.KEY_USER_CHANNEL_EVENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserChannelEventsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserChannelEventsRecord>>asList(Keys.KEY_USER_CHANNEL_EVENTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserChannelEventsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserChannelEventsRecord, ?>>asList(Keys.FK_USER_CHANNEL_EVENTS_USER_ID);
    }

    public Users users() {
        return new Users(this, Keys.FK_USER_CHANNEL_EVENTS_USER_ID);
    }

    @Override
    public UserChannelEvents as(String alias) {
        return new UserChannelEvents(DSL.name(alias), this);
    }

    @Override
    public UserChannelEvents as(Name alias) {
        return new UserChannelEvents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserChannelEvents rename(String name) {
        return new UserChannelEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserChannelEvents rename(Name name) {
        return new UserChannelEvents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
