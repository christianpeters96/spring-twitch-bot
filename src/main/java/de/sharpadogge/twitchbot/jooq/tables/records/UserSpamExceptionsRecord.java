/*
 * This file is generated by jOOQ.
 */
package de.sharpadogge.twitchbot.jooq.tables.records;


import de.sharpadogge.twitchbot.jooq.tables.UserSpamExceptions;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSpamExceptionsRecord extends UpdatableRecordImpl<UserSpamExceptionsRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = -1982844385;

    /**
     * Setter for <code>twitchbot.user_spam_exceptions.user_id</code>.
     */
    public void setUserId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_exceptions.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>twitchbot.user_spam_exceptions.filter</code>.
     */
    public void setFilter(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_exceptions.filter</code>.
     */
    public String getFilter() {
        return (String) get(1);
    }

    /**
     * Setter for <code>twitchbot.user_spam_exceptions.exception</code>.
     */
    public void setException(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>twitchbot.user_spam_exceptions.exception</code>.
     */
    public String getException() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<Long, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UserSpamExceptions.USER_SPAM_EXCEPTIONS.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return UserSpamExceptions.USER_SPAM_EXCEPTIONS.FILTER;
    }

    @Override
    public Field<String> field3() {
        return UserSpamExceptions.USER_SPAM_EXCEPTIONS.EXCEPTION;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getFilter();
    }

    @Override
    public String component3() {
        return getException();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getFilter();
    }

    @Override
    public String value3() {
        return getException();
    }

    @Override
    public UserSpamExceptionsRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserSpamExceptionsRecord value2(String value) {
        setFilter(value);
        return this;
    }

    @Override
    public UserSpamExceptionsRecord value3(String value) {
        setException(value);
        return this;
    }

    @Override
    public UserSpamExceptionsRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserSpamExceptionsRecord
     */
    public UserSpamExceptionsRecord() {
        super(UserSpamExceptions.USER_SPAM_EXCEPTIONS);
    }

    /**
     * Create a detached, initialised UserSpamExceptionsRecord
     */
    public UserSpamExceptionsRecord(Long userId, String filter, String exception) {
        super(UserSpamExceptions.USER_SPAM_EXCEPTIONS);

        set(0, userId);
        set(1, filter);
        set(2, exception);
    }
}
