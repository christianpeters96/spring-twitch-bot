/*
 * This file is generated by jOOQ.
 */
package de.sharpadogge.twitchbot.jooq;


import de.sharpadogge.twitchbot.jooq.tables.IntegrationAuth;
import de.sharpadogge.twitchbot.jooq.tables.MusicSettings;
import de.sharpadogge.twitchbot.jooq.tables.MusicYoutubePlaylist;
import de.sharpadogge.twitchbot.jooq.tables.MusicYoutubeRequests;
import de.sharpadogge.twitchbot.jooq.tables.MusicYoutubeSettings;
import de.sharpadogge.twitchbot.jooq.tables.TwitchCommandStatsOverall;
import de.sharpadogge.twitchbot.jooq.tables.TwitchUserStatsDaily;
import de.sharpadogge.twitchbot.jooq.tables.TwitchUserStatsOverall;
import de.sharpadogge.twitchbot.jooq.tables.UserChannelEvents;
import de.sharpadogge.twitchbot.jooq.tables.UserCommand;
import de.sharpadogge.twitchbot.jooq.tables.UserCommandAction;
import de.sharpadogge.twitchbot.jooq.tables.UserCommandAlias;
import de.sharpadogge.twitchbot.jooq.tables.UserCommandPermission;
import de.sharpadogge.twitchbot.jooq.tables.UserIntegration;
import de.sharpadogge.twitchbot.jooq.tables.UserLinkWhitelist;
import de.sharpadogge.twitchbot.jooq.tables.UserSpamExceptions;
import de.sharpadogge.twitchbot.jooq.tables.UserSpamFilters;
import de.sharpadogge.twitchbot.jooq.tables.UserStringBlacklist;
import de.sharpadogge.twitchbot.jooq.tables.UserUrlWhitelist;
import de.sharpadogge.twitchbot.jooq.tables.UserVars;
import de.sharpadogge.twitchbot.jooq.tables.Users;
import de.sharpadogge.twitchbot.jooq.tables.records.IntegrationAuthRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.MusicSettingsRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.MusicYoutubePlaylistRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.MusicYoutubeRequestsRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.MusicYoutubeSettingsRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.TwitchCommandStatsOverallRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.TwitchUserStatsDailyRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.TwitchUserStatsOverallRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserChannelEventsRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserCommandActionRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserCommandAliasRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserCommandPermissionRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserCommandRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserIntegrationRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserLinkWhitelistRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserSpamExceptionsRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserSpamFiltersRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserStringBlacklistRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserUrlWhitelistRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UserVarsRecord;
import de.sharpadogge.twitchbot.jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>twitchbot</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<IntegrationAuthRecord, Long> IDENTITY_INTEGRATION_AUTH = Identities0.IDENTITY_INTEGRATION_AUTH;
    public static final Identity<MusicSettingsRecord, Long> IDENTITY_MUSIC_SETTINGS = Identities0.IDENTITY_MUSIC_SETTINGS;
    public static final Identity<MusicYoutubePlaylistRecord, Long> IDENTITY_MUSIC_YOUTUBE_PLAYLIST = Identities0.IDENTITY_MUSIC_YOUTUBE_PLAYLIST;
    public static final Identity<MusicYoutubeRequestsRecord, Long> IDENTITY_MUSIC_YOUTUBE_REQUESTS = Identities0.IDENTITY_MUSIC_YOUTUBE_REQUESTS;
    public static final Identity<MusicYoutubeSettingsRecord, Long> IDENTITY_MUSIC_YOUTUBE_SETTINGS = Identities0.IDENTITY_MUSIC_YOUTUBE_SETTINGS;
    public static final Identity<TwitchCommandStatsOverallRecord, Long> IDENTITY_TWITCH_COMMAND_STATS_OVERALL = Identities0.IDENTITY_TWITCH_COMMAND_STATS_OVERALL;
    public static final Identity<TwitchUserStatsOverallRecord, Integer> IDENTITY_TWITCH_USER_STATS_OVERALL = Identities0.IDENTITY_TWITCH_USER_STATS_OVERALL;
    public static final Identity<UserChannelEventsRecord, Long> IDENTITY_USER_CHANNEL_EVENTS = Identities0.IDENTITY_USER_CHANNEL_EVENTS;
    public static final Identity<UserCommandRecord, Long> IDENTITY_USER_COMMAND = Identities0.IDENTITY_USER_COMMAND;
    public static final Identity<UsersRecord, Long> IDENTITY_USERS = Identities0.IDENTITY_USERS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<IntegrationAuthRecord> KEY_INTEGRATION_AUTH_PRIMARY = UniqueKeys0.KEY_INTEGRATION_AUTH_PRIMARY;
    public static final UniqueKey<MusicSettingsRecord> KEY_MUSIC_SETTINGS_PRIMARY = UniqueKeys0.KEY_MUSIC_SETTINGS_PRIMARY;
    public static final UniqueKey<MusicYoutubePlaylistRecord> KEY_MUSIC_YOUTUBE_PLAYLIST_PRIMARY = UniqueKeys0.KEY_MUSIC_YOUTUBE_PLAYLIST_PRIMARY;
    public static final UniqueKey<MusicYoutubeRequestsRecord> KEY_MUSIC_YOUTUBE_REQUESTS_PRIMARY = UniqueKeys0.KEY_MUSIC_YOUTUBE_REQUESTS_PRIMARY;
    public static final UniqueKey<MusicYoutubeSettingsRecord> KEY_MUSIC_YOUTUBE_SETTINGS_PRIMARY = UniqueKeys0.KEY_MUSIC_YOUTUBE_SETTINGS_PRIMARY;
    public static final UniqueKey<TwitchCommandStatsOverallRecord> KEY_TWITCH_COMMAND_STATS_OVERALL_PRIMARY = UniqueKeys0.KEY_TWITCH_COMMAND_STATS_OVERALL_PRIMARY;
    public static final UniqueKey<TwitchUserStatsDailyRecord> KEY_TWITCH_USER_STATS_DAILY_PRIMARY = UniqueKeys0.KEY_TWITCH_USER_STATS_DAILY_PRIMARY;
    public static final UniqueKey<TwitchUserStatsOverallRecord> KEY_TWITCH_USER_STATS_OVERALL_PRIMARY = UniqueKeys0.KEY_TWITCH_USER_STATS_OVERALL_PRIMARY;
    public static final UniqueKey<UserChannelEventsRecord> KEY_USER_CHANNEL_EVENTS_PRIMARY = UniqueKeys0.KEY_USER_CHANNEL_EVENTS_PRIMARY;
    public static final UniqueKey<UserCommandRecord> KEY_USER_COMMAND_PRIMARY = UniqueKeys0.KEY_USER_COMMAND_PRIMARY;
    public static final UniqueKey<UserCommandActionRecord> KEY_USER_COMMAND_ACTION_PRIMARY = UniqueKeys0.KEY_USER_COMMAND_ACTION_PRIMARY;
    public static final UniqueKey<UserCommandAliasRecord> KEY_USER_COMMAND_ALIAS_PRIMARY = UniqueKeys0.KEY_USER_COMMAND_ALIAS_PRIMARY;
    public static final UniqueKey<UserCommandPermissionRecord> KEY_USER_COMMAND_PERMISSION_PRIMARY = UniqueKeys0.KEY_USER_COMMAND_PERMISSION_PRIMARY;
    public static final UniqueKey<UserIntegrationRecord> KEY_USER_INTEGRATION_PRIMARY = UniqueKeys0.KEY_USER_INTEGRATION_PRIMARY;
    public static final UniqueKey<UserLinkWhitelistRecord> KEY_USER_LINK_WHITELIST_PRIMARY = UniqueKeys0.KEY_USER_LINK_WHITELIST_PRIMARY;
    public static final UniqueKey<UserSpamExceptionsRecord> KEY_USER_SPAM_EXCEPTIONS_PRIMARY = UniqueKeys0.KEY_USER_SPAM_EXCEPTIONS_PRIMARY;
    public static final UniqueKey<UserSpamFiltersRecord> KEY_USER_SPAM_FILTERS_PRIMARY = UniqueKeys0.KEY_USER_SPAM_FILTERS_PRIMARY;
    public static final UniqueKey<UserStringBlacklistRecord> KEY_USER_STRING_BLACKLIST_PRIMARY = UniqueKeys0.KEY_USER_STRING_BLACKLIST_PRIMARY;
    public static final UniqueKey<UserUrlWhitelistRecord> KEY_USER_URL_WHITELIST_PRIMARY = UniqueKeys0.KEY_USER_URL_WHITELIST_PRIMARY;
    public static final UniqueKey<UserVarsRecord> KEY_USER_VARS_PRIMARY = UniqueKeys0.KEY_USER_VARS_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_TOKEN = UniqueKeys0.KEY_USERS_TOKEN;
    public static final UniqueKey<UsersRecord> KEY_USERS_TTV_ID = UniqueKeys0.KEY_USERS_TTV_ID;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<MusicSettingsRecord, UsersRecord> FK_MUSIC_SETTINGS_USER_ID = ForeignKeys0.FK_MUSIC_SETTINGS_USER_ID;
    public static final ForeignKey<MusicYoutubePlaylistRecord, UsersRecord> FK_MUSIC_YOUTUBE_PLAYLIST_USER_ID = ForeignKeys0.FK_MUSIC_YOUTUBE_PLAYLIST_USER_ID;
    public static final ForeignKey<MusicYoutubeRequestsRecord, UsersRecord> FK_MUSIC_YOUTUBE_REQUESTS_USER_ID = ForeignKeys0.FK_MUSIC_YOUTUBE_REQUESTS_USER_ID;
    public static final ForeignKey<MusicYoutubeSettingsRecord, UsersRecord> FK_MUSIC_YOUTUBE_SETTINGS_USER_ID = ForeignKeys0.FK_MUSIC_YOUTUBE_SETTINGS_USER_ID;
    public static final ForeignKey<UserChannelEventsRecord, UsersRecord> FK_USER_CHANNEL_EVENTS_USER_ID = ForeignKeys0.FK_USER_CHANNEL_EVENTS_USER_ID;
    public static final ForeignKey<UserCommandRecord, UsersRecord> FK_USER_COMMAND_USER_ID = ForeignKeys0.FK_USER_COMMAND_USER_ID;
    public static final ForeignKey<UserCommandActionRecord, UsersRecord> FK_USER_COMMAND_ACTION_USER_ID = ForeignKeys0.FK_USER_COMMAND_ACTION_USER_ID;
    public static final ForeignKey<UserCommandActionRecord, UserCommandRecord> FK_USER_COMMAND_ACTION_COMMAND_ID = ForeignKeys0.FK_USER_COMMAND_ACTION_COMMAND_ID;
    public static final ForeignKey<UserCommandAliasRecord, UsersRecord> FK_USER_COMMAND_ALIAS_USER_ID = ForeignKeys0.FK_USER_COMMAND_ALIAS_USER_ID;
    public static final ForeignKey<UserCommandAliasRecord, UserCommandRecord> FK_USER_COMMAND_ALIAS_COMMAND_ID = ForeignKeys0.FK_USER_COMMAND_ALIAS_COMMAND_ID;
    public static final ForeignKey<UserCommandPermissionRecord, UsersRecord> FK_USER_COMMAND_PERMISSION_USER_ID = ForeignKeys0.FK_USER_COMMAND_PERMISSION_USER_ID;
    public static final ForeignKey<UserCommandPermissionRecord, UserCommandRecord> FK_USER_COMMAND_PERMISSION_COMMAND_ID = ForeignKeys0.FK_USER_COMMAND_PERMISSION_COMMAND_ID;
    public static final ForeignKey<UserIntegrationRecord, UsersRecord> FK_USER_INTEGRATION_USER_ID = ForeignKeys0.FK_USER_INTEGRATION_USER_ID;
    public static final ForeignKey<UserIntegrationRecord, IntegrationAuthRecord> FK_USER_INTEGRATION_INTEGRATION_ID = ForeignKeys0.FK_USER_INTEGRATION_INTEGRATION_ID;
    public static final ForeignKey<UserLinkWhitelistRecord, UsersRecord> FK_LINK_WHITELIST_USER_ID = ForeignKeys0.FK_LINK_WHITELIST_USER_ID;
    public static final ForeignKey<UserSpamExceptionsRecord, UsersRecord> FK_SPAM_EXCEPTIONS_USER_ID = ForeignKeys0.FK_SPAM_EXCEPTIONS_USER_ID;
    public static final ForeignKey<UserSpamFiltersRecord, UsersRecord> FK_SPAM_FILTERS_USER_ID = ForeignKeys0.FK_SPAM_FILTERS_USER_ID;
    public static final ForeignKey<UserStringBlacklistRecord, UsersRecord> FK_STRING_BLACKLIST_USER_ID = ForeignKeys0.FK_STRING_BLACKLIST_USER_ID;
    public static final ForeignKey<UserUrlWhitelistRecord, UsersRecord> FK_URL_WHITELIST_USER_ID = ForeignKeys0.FK_URL_WHITELIST_USER_ID;
    public static final ForeignKey<UserVarsRecord, UsersRecord> FK_USER_VARS_USER_ID = ForeignKeys0.FK_USER_VARS_USER_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<IntegrationAuthRecord, Long> IDENTITY_INTEGRATION_AUTH = Internal.createIdentity(IntegrationAuth.INTEGRATION_AUTH, IntegrationAuth.INTEGRATION_AUTH.ID);
        public static Identity<MusicSettingsRecord, Long> IDENTITY_MUSIC_SETTINGS = Internal.createIdentity(MusicSettings.MUSIC_SETTINGS, MusicSettings.MUSIC_SETTINGS.ID);
        public static Identity<MusicYoutubePlaylistRecord, Long> IDENTITY_MUSIC_YOUTUBE_PLAYLIST = Internal.createIdentity(MusicYoutubePlaylist.MUSIC_YOUTUBE_PLAYLIST, MusicYoutubePlaylist.MUSIC_YOUTUBE_PLAYLIST.ID);
        public static Identity<MusicYoutubeRequestsRecord, Long> IDENTITY_MUSIC_YOUTUBE_REQUESTS = Internal.createIdentity(MusicYoutubeRequests.MUSIC_YOUTUBE_REQUESTS, MusicYoutubeRequests.MUSIC_YOUTUBE_REQUESTS.ID);
        public static Identity<MusicYoutubeSettingsRecord, Long> IDENTITY_MUSIC_YOUTUBE_SETTINGS = Internal.createIdentity(MusicYoutubeSettings.MUSIC_YOUTUBE_SETTINGS, MusicYoutubeSettings.MUSIC_YOUTUBE_SETTINGS.ID);
        public static Identity<TwitchCommandStatsOverallRecord, Long> IDENTITY_TWITCH_COMMAND_STATS_OVERALL = Internal.createIdentity(TwitchCommandStatsOverall.TWITCH_COMMAND_STATS_OVERALL, TwitchCommandStatsOverall.TWITCH_COMMAND_STATS_OVERALL.ID);
        public static Identity<TwitchUserStatsOverallRecord, Integer> IDENTITY_TWITCH_USER_STATS_OVERALL = Internal.createIdentity(TwitchUserStatsOverall.TWITCH_USER_STATS_OVERALL, TwitchUserStatsOverall.TWITCH_USER_STATS_OVERALL.ID);
        public static Identity<UserChannelEventsRecord, Long> IDENTITY_USER_CHANNEL_EVENTS = Internal.createIdentity(UserChannelEvents.USER_CHANNEL_EVENTS, UserChannelEvents.USER_CHANNEL_EVENTS.ID);
        public static Identity<UserCommandRecord, Long> IDENTITY_USER_COMMAND = Internal.createIdentity(UserCommand.USER_COMMAND, UserCommand.USER_COMMAND.ID);
        public static Identity<UsersRecord, Long> IDENTITY_USERS = Internal.createIdentity(Users.USERS, Users.USERS.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<IntegrationAuthRecord> KEY_INTEGRATION_AUTH_PRIMARY = Internal.createUniqueKey(IntegrationAuth.INTEGRATION_AUTH, "KEY_integration_auth_PRIMARY", new TableField[] { IntegrationAuth.INTEGRATION_AUTH.ID }, true);
        public static final UniqueKey<MusicSettingsRecord> KEY_MUSIC_SETTINGS_PRIMARY = Internal.createUniqueKey(MusicSettings.MUSIC_SETTINGS, "KEY_music_settings_PRIMARY", new TableField[] { MusicSettings.MUSIC_SETTINGS.ID }, true);
        public static final UniqueKey<MusicYoutubePlaylistRecord> KEY_MUSIC_YOUTUBE_PLAYLIST_PRIMARY = Internal.createUniqueKey(MusicYoutubePlaylist.MUSIC_YOUTUBE_PLAYLIST, "KEY_music_youtube_playlist_PRIMARY", new TableField[] { MusicYoutubePlaylist.MUSIC_YOUTUBE_PLAYLIST.ID }, true);
        public static final UniqueKey<MusicYoutubeRequestsRecord> KEY_MUSIC_YOUTUBE_REQUESTS_PRIMARY = Internal.createUniqueKey(MusicYoutubeRequests.MUSIC_YOUTUBE_REQUESTS, "KEY_music_youtube_requests_PRIMARY", new TableField[] { MusicYoutubeRequests.MUSIC_YOUTUBE_REQUESTS.ID }, true);
        public static final UniqueKey<MusicYoutubeSettingsRecord> KEY_MUSIC_YOUTUBE_SETTINGS_PRIMARY = Internal.createUniqueKey(MusicYoutubeSettings.MUSIC_YOUTUBE_SETTINGS, "KEY_music_youtube_settings_PRIMARY", new TableField[] { MusicYoutubeSettings.MUSIC_YOUTUBE_SETTINGS.ID }, true);
        public static final UniqueKey<TwitchCommandStatsOverallRecord> KEY_TWITCH_COMMAND_STATS_OVERALL_PRIMARY = Internal.createUniqueKey(TwitchCommandStatsOverall.TWITCH_COMMAND_STATS_OVERALL, "KEY_twitch_command_stats_overall_PRIMARY", new TableField[] { TwitchCommandStatsOverall.TWITCH_COMMAND_STATS_OVERALL.ID }, true);
        public static final UniqueKey<TwitchUserStatsDailyRecord> KEY_TWITCH_USER_STATS_DAILY_PRIMARY = Internal.createUniqueKey(TwitchUserStatsDaily.TWITCH_USER_STATS_DAILY, "KEY_twitch_user_stats_daily_PRIMARY", new TableField[] { TwitchUserStatsDaily.TWITCH_USER_STATS_DAILY.DATE, TwitchUserStatsDaily.TWITCH_USER_STATS_DAILY.CHANNEL, TwitchUserStatsDaily.TWITCH_USER_STATS_DAILY.USERNAME }, true);
        public static final UniqueKey<TwitchUserStatsOverallRecord> KEY_TWITCH_USER_STATS_OVERALL_PRIMARY = Internal.createUniqueKey(TwitchUserStatsOverall.TWITCH_USER_STATS_OVERALL, "KEY_twitch_user_stats_overall_PRIMARY", new TableField[] { TwitchUserStatsOverall.TWITCH_USER_STATS_OVERALL.ID }, true);
        public static final UniqueKey<UserChannelEventsRecord> KEY_USER_CHANNEL_EVENTS_PRIMARY = Internal.createUniqueKey(UserChannelEvents.USER_CHANNEL_EVENTS, "KEY_user_channel_events_PRIMARY", new TableField[] { UserChannelEvents.USER_CHANNEL_EVENTS.ID }, true);
        public static final UniqueKey<UserCommandRecord> KEY_USER_COMMAND_PRIMARY = Internal.createUniqueKey(UserCommand.USER_COMMAND, "KEY_user_command_PRIMARY", new TableField[] { UserCommand.USER_COMMAND.ID }, true);
        public static final UniqueKey<UserCommandActionRecord> KEY_USER_COMMAND_ACTION_PRIMARY = Internal.createUniqueKey(UserCommandAction.USER_COMMAND_ACTION, "KEY_user_command_action_PRIMARY", new TableField[] { UserCommandAction.USER_COMMAND_ACTION.USER_ID, UserCommandAction.USER_COMMAND_ACTION.COMMAND_ID, UserCommandAction.USER_COMMAND_ACTION.IDX }, true);
        public static final UniqueKey<UserCommandAliasRecord> KEY_USER_COMMAND_ALIAS_PRIMARY = Internal.createUniqueKey(UserCommandAlias.USER_COMMAND_ALIAS, "KEY_user_command_alias_PRIMARY", new TableField[] { UserCommandAlias.USER_COMMAND_ALIAS.USER_ID, UserCommandAlias.USER_COMMAND_ALIAS.ALIAS }, true);
        public static final UniqueKey<UserCommandPermissionRecord> KEY_USER_COMMAND_PERMISSION_PRIMARY = Internal.createUniqueKey(UserCommandPermission.USER_COMMAND_PERMISSION, "KEY_user_command_permission_PRIMARY", new TableField[] { UserCommandPermission.USER_COMMAND_PERMISSION.USER_ID, UserCommandPermission.USER_COMMAND_PERMISSION.COMMAND_ID, UserCommandPermission.USER_COMMAND_PERMISSION.PERMISSION }, true);
        public static final UniqueKey<UserIntegrationRecord> KEY_USER_INTEGRATION_PRIMARY = Internal.createUniqueKey(UserIntegration.USER_INTEGRATION, "KEY_user_integration_PRIMARY", new TableField[] { UserIntegration.USER_INTEGRATION.USER_ID, UserIntegration.USER_INTEGRATION.INTEGRATION_ID }, true);
        public static final UniqueKey<UserLinkWhitelistRecord> KEY_USER_LINK_WHITELIST_PRIMARY = Internal.createUniqueKey(UserLinkWhitelist.USER_LINK_WHITELIST, "KEY_user_link_whitelist_PRIMARY", new TableField[] { UserLinkWhitelist.USER_LINK_WHITELIST.USER_ID, UserLinkWhitelist.USER_LINK_WHITELIST.LINK }, true);
        public static final UniqueKey<UserSpamExceptionsRecord> KEY_USER_SPAM_EXCEPTIONS_PRIMARY = Internal.createUniqueKey(UserSpamExceptions.USER_SPAM_EXCEPTIONS, "KEY_user_spam_exceptions_PRIMARY", new TableField[] { UserSpamExceptions.USER_SPAM_EXCEPTIONS.USER_ID, UserSpamExceptions.USER_SPAM_EXCEPTIONS.FILTER, UserSpamExceptions.USER_SPAM_EXCEPTIONS.EXCEPTION }, true);
        public static final UniqueKey<UserSpamFiltersRecord> KEY_USER_SPAM_FILTERS_PRIMARY = Internal.createUniqueKey(UserSpamFilters.USER_SPAM_FILTERS, "KEY_user_spam_filters_PRIMARY", new TableField[] { UserSpamFilters.USER_SPAM_FILTERS.USER_ID, UserSpamFilters.USER_SPAM_FILTERS.FILTER }, true);
        public static final UniqueKey<UserStringBlacklistRecord> KEY_USER_STRING_BLACKLIST_PRIMARY = Internal.createUniqueKey(UserStringBlacklist.USER_STRING_BLACKLIST, "KEY_user_string_blacklist_PRIMARY", new TableField[] { UserStringBlacklist.USER_STRING_BLACKLIST.USER_ID, UserStringBlacklist.USER_STRING_BLACKLIST.STRING }, true);
        public static final UniqueKey<UserUrlWhitelistRecord> KEY_USER_URL_WHITELIST_PRIMARY = Internal.createUniqueKey(UserUrlWhitelist.USER_URL_WHITELIST, "KEY_user_url_whitelist_PRIMARY", new TableField[] { UserUrlWhitelist.USER_URL_WHITELIST.USER_ID, UserUrlWhitelist.USER_URL_WHITELIST.URL }, true);
        public static final UniqueKey<UserVarsRecord> KEY_USER_VARS_PRIMARY = Internal.createUniqueKey(UserVars.USER_VARS, "KEY_user_vars_PRIMARY", new TableField[] { UserVars.USER_VARS.USER_ID, UserVars.USER_VARS.NAME }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, "KEY_users_PRIMARY", new TableField[] { Users.USERS.ID }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_TOKEN = Internal.createUniqueKey(Users.USERS, "KEY_users_token", new TableField[] { Users.USERS.TOKEN }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_TTV_ID = Internal.createUniqueKey(Users.USERS, "KEY_users_ttv_id", new TableField[] { Users.USERS.TTV_ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<MusicSettingsRecord, UsersRecord> FK_MUSIC_SETTINGS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, MusicSettings.MUSIC_SETTINGS, "fk_music_settings_user_id", new TableField[] { MusicSettings.MUSIC_SETTINGS.USER_ID }, true);
        public static final ForeignKey<MusicYoutubePlaylistRecord, UsersRecord> FK_MUSIC_YOUTUBE_PLAYLIST_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, MusicYoutubePlaylist.MUSIC_YOUTUBE_PLAYLIST, "fk_music_youtube_playlist_user_id", new TableField[] { MusicYoutubePlaylist.MUSIC_YOUTUBE_PLAYLIST.USER_ID }, true);
        public static final ForeignKey<MusicYoutubeRequestsRecord, UsersRecord> FK_MUSIC_YOUTUBE_REQUESTS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, MusicYoutubeRequests.MUSIC_YOUTUBE_REQUESTS, "fk_music_youtube_requests_user_id", new TableField[] { MusicYoutubeRequests.MUSIC_YOUTUBE_REQUESTS.USER_ID }, true);
        public static final ForeignKey<MusicYoutubeSettingsRecord, UsersRecord> FK_MUSIC_YOUTUBE_SETTINGS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, MusicYoutubeSettings.MUSIC_YOUTUBE_SETTINGS, "fk_music_youtube_settings_user_id", new TableField[] { MusicYoutubeSettings.MUSIC_YOUTUBE_SETTINGS.USER_ID }, true);
        public static final ForeignKey<UserChannelEventsRecord, UsersRecord> FK_USER_CHANNEL_EVENTS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserChannelEvents.USER_CHANNEL_EVENTS, "fk_user_channel_events_user_id", new TableField[] { UserChannelEvents.USER_CHANNEL_EVENTS.USER_ID }, true);
        public static final ForeignKey<UserCommandRecord, UsersRecord> FK_USER_COMMAND_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserCommand.USER_COMMAND, "fk_user_command_user_id", new TableField[] { UserCommand.USER_COMMAND.USER_ID }, true);
        public static final ForeignKey<UserCommandActionRecord, UsersRecord> FK_USER_COMMAND_ACTION_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserCommandAction.USER_COMMAND_ACTION, "fk_user_command_action_user_id", new TableField[] { UserCommandAction.USER_COMMAND_ACTION.USER_ID }, true);
        public static final ForeignKey<UserCommandActionRecord, UserCommandRecord> FK_USER_COMMAND_ACTION_COMMAND_ID = Internal.createForeignKey(Keys.KEY_USER_COMMAND_PRIMARY, UserCommandAction.USER_COMMAND_ACTION, "fk_user_command_action_command_id", new TableField[] { UserCommandAction.USER_COMMAND_ACTION.COMMAND_ID }, true);
        public static final ForeignKey<UserCommandAliasRecord, UsersRecord> FK_USER_COMMAND_ALIAS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserCommandAlias.USER_COMMAND_ALIAS, "fk_user_command_alias_user_id", new TableField[] { UserCommandAlias.USER_COMMAND_ALIAS.USER_ID }, true);
        public static final ForeignKey<UserCommandAliasRecord, UserCommandRecord> FK_USER_COMMAND_ALIAS_COMMAND_ID = Internal.createForeignKey(Keys.KEY_USER_COMMAND_PRIMARY, UserCommandAlias.USER_COMMAND_ALIAS, "fk_user_command_alias_command_id", new TableField[] { UserCommandAlias.USER_COMMAND_ALIAS.COMMAND_ID }, true);
        public static final ForeignKey<UserCommandPermissionRecord, UsersRecord> FK_USER_COMMAND_PERMISSION_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserCommandPermission.USER_COMMAND_PERMISSION, "fk_user_command_permission_user_id", new TableField[] { UserCommandPermission.USER_COMMAND_PERMISSION.USER_ID }, true);
        public static final ForeignKey<UserCommandPermissionRecord, UserCommandRecord> FK_USER_COMMAND_PERMISSION_COMMAND_ID = Internal.createForeignKey(Keys.KEY_USER_COMMAND_PRIMARY, UserCommandPermission.USER_COMMAND_PERMISSION, "fk_user_command_permission_command_id", new TableField[] { UserCommandPermission.USER_COMMAND_PERMISSION.COMMAND_ID }, true);
        public static final ForeignKey<UserIntegrationRecord, UsersRecord> FK_USER_INTEGRATION_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserIntegration.USER_INTEGRATION, "fk_user_integration_user_id", new TableField[] { UserIntegration.USER_INTEGRATION.USER_ID }, true);
        public static final ForeignKey<UserIntegrationRecord, IntegrationAuthRecord> FK_USER_INTEGRATION_INTEGRATION_ID = Internal.createForeignKey(Keys.KEY_INTEGRATION_AUTH_PRIMARY, UserIntegration.USER_INTEGRATION, "fk_user_integration_integration_id", new TableField[] { UserIntegration.USER_INTEGRATION.INTEGRATION_ID }, true);
        public static final ForeignKey<UserLinkWhitelistRecord, UsersRecord> FK_LINK_WHITELIST_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserLinkWhitelist.USER_LINK_WHITELIST, "fk_link_whitelist_user_id", new TableField[] { UserLinkWhitelist.USER_LINK_WHITELIST.USER_ID }, true);
        public static final ForeignKey<UserSpamExceptionsRecord, UsersRecord> FK_SPAM_EXCEPTIONS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserSpamExceptions.USER_SPAM_EXCEPTIONS, "fk_spam_exceptions_user_id", new TableField[] { UserSpamExceptions.USER_SPAM_EXCEPTIONS.USER_ID }, true);
        public static final ForeignKey<UserSpamFiltersRecord, UsersRecord> FK_SPAM_FILTERS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserSpamFilters.USER_SPAM_FILTERS, "fk_spam_filters_user_id", new TableField[] { UserSpamFilters.USER_SPAM_FILTERS.USER_ID }, true);
        public static final ForeignKey<UserStringBlacklistRecord, UsersRecord> FK_STRING_BLACKLIST_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserStringBlacklist.USER_STRING_BLACKLIST, "fk_string_blacklist_user_id", new TableField[] { UserStringBlacklist.USER_STRING_BLACKLIST.USER_ID }, true);
        public static final ForeignKey<UserUrlWhitelistRecord, UsersRecord> FK_URL_WHITELIST_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserUrlWhitelist.USER_URL_WHITELIST, "fk_url_whitelist_user_id", new TableField[] { UserUrlWhitelist.USER_URL_WHITELIST.USER_ID }, true);
        public static final ForeignKey<UserVarsRecord, UsersRecord> FK_USER_VARS_USER_ID = Internal.createForeignKey(Keys.KEY_USERS_PRIMARY, UserVars.USER_VARS, "fk_user_vars_user_id", new TableField[] { UserVars.USER_VARS.USER_ID }, true);
    }
}
